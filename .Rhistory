rm(list=ls())
now=Sys.Date(); today=format(now, format="%d%b%y")
library(devtools)
install_github("dlemas/microbes")
install_github("dlemas/microbes")
library(microbes)
# This code contains all the analyses implemented in the microbes R package
# **************************************************************************** #
# ***************             Start UP Commands                *************** #
# *************************************************************************** #
rm(list=ls())
now=Sys.Date(); today=format(now, format="%d%b%y")
# **************************************************************************** #
# ***************               Microbes Package               *************** #
# **************************************************************************** #
# install.packages("devtools")
# install RTools
library(devtools)
install_github("dlemas/microbes")
# **************************************************************************** #
# ***************             Start UP Commands                *************** #
# *************************************************************************** #
rm(list=ls())
now=Sys.Date(); today=format(now, format="%d%b%y")
# **************************************************************************** #
# ***************               Microbes Package               *************** #
# **************************************************************************** #
# install.packages("devtools")
# install RTools
library(devtools)
#find_rtools()
install_github("dlemas/microbes")
library(microbes)
normalize_counts()
rm(list=ls())
now=Sys.Date(); today=format(now, format="%d%b%y")
# **************************************************************************** #
# ***************               Microbes Package               *************** #
# **************************************************************************** #
# install.packages("devtools")
# install RTools
library(devtools)
install_github("dlemas/microbes")
library(microbes)
install.packages("roxygen")
install.packages("roxygen")
# This code contains all the analyses implemented in the microbes R package
# **************************************************************************** #
# ***************             Start UP Commands                *************** #
# *************************************************************************** #
rm(list=ls())
now=Sys.Date(); today=format(now, format="%d%b%y")
# **************************************************************************** #
# ***************               Microbes Package               *************** #
# **************************************************************************** #
library(devtools)
install_github("dlemas/microbes")
library(gcookbook)
library(ggplot2)
library(plyr)
library(microbes)
# data: twin otu (class)
head(twin_otu_class_green)
str(twin_otu_class_green)
# proportional Stacked Area Graph
# Transform data
head(uspopage)
str(uspopage)
uspopage_prop=ddply(uspopage, "Year", transform, Percent=Thousands/sum(Thousands)*100)
head(uspopage_prop)
otu.trans=as.data.frame(t(otu.normed))
# transform data
otu.norm=normalize_counts(twin_otu_class_green)
head(otu.norm)
str(otu.norm)
sum(otu.norm[1])
otu.trans=as.data.frame(t(otu.normed))
otu.trans=as.data.frame(t(otu.norm))
head(otu.trans)
names(otu.trans)
otu.trans$id=row.names(otu.trans)
str(otu.trans)
otu.trans.ready=otu.trans[,c(24,1:8)]
head(otu.trans.ready)
A<- reshape(otu.trans.ready,
varying = names(otu.trans.ready[-1]),
v.names = "rel.abund",
timevar = "bug",
times = names(otu.trans.ready[-1]),
direction = "long")
head(A)
row.names(A)=NULL
B=as.data.frame(A[1:3])
head(B)
str(B)
B$bug=as.factor(B$bug)
B$id.n=as.numeric(B$id)
head(B)
B
B$id.n=as.numeric(gsub("TS",B$id))
head(B)
B$id.n=as.numeric(gsub("TS","",B$id))
head(B)
str(B)
names(B)
plot1=ggplot(B, aes(x=id.n, y=rel.abund, fill=bug))+
geom_area(colour="black", size=.2, alpha=.4)+
scale_fill_brewer(palette="Blues", breaks=rev(levels(B$bug)))
plot1
plot1+labs(x="Participants", y="Relative Abundance (%)")
library(gcookbook)
library(ggplot2)
library(plyr)
library(microbes)
# data: us population age
head(uspopage)
str(uspopage)
# data: twin otu (class)
head(twin_otu_class_green)
str(twin_otu_class_green)
# proportional Stacked Area Graph
# Transform data
head(uspopage)
str(uspopage)
uspopage_prop=ddply(uspopage, "Year", transform, Percent=Thousands/sum(Thousands)*100)
head(uspopage_prop)
# transform data
otu.norm=normalize_counts(twin_otu_class_green)
head(otu.norm)
str(otu.norm)
sum(otu.norm[1])
otu.trans=as.data.frame(t(otu.norm))
head(otu.trans)
names(otu.trans)
otu.trans$id=row.names(otu.trans)
str(otu.trans)
str(otu.trans)
otu.trans.ready=otu.trans[,c(24,1:23)]
head(otu.trans.ready)
sum(otu.trans.ready[1,])
sum(otu.trans.ready[1,c(2:24)])
# Reformat the data
A<- reshape(otu.trans.ready,
varying = names(otu.trans.ready[-1]),
v.names = "rel.abund",
timevar = "bug",
times = names(otu.trans.ready[-1]),
direction = "long")
head(A)
row.names(A)=NULL
B=as.data.frame(A[1:3])
head(B)
str(B)
B$bug=as.factor(B$bug)
B$id.n=as.numeric(gsub("TS","",B$id))
head(B)
str(B)
# plot: twin data
# plotting works
names(B)
plot1=ggplot(B, aes(x=id.n, y=rel.abund, fill=bug))+
geom_area(colour="black", size=.2, alpha=.4)+
scale_fill_brewer(palette="Blues", breaks=rev(levels(B$bug)))
plot1+labs(x="Participants", y="Relative Abundance (%)")
plot1+scale_fill_grey(start=0.5, end 0)
plot1+scale_fill_grey(start=0.5, end= 0)
plot.base=ggplot(B, aes(x=id.n, y=rel.abund, fill=bug))
plot.colors+scale_color_hue()
plot.base+scale_color_hue()
plot.base=ggplot(B, aes(x=id.n, y=rel.abund, fill=bug))+geom_area(colour="black", size=.2, alpha=.4)
plot.base+scale_color_hue()
plot1=plot.base+scale_color_hue()
plot1
plot1+labs(x="Participants", y="Relative Abundance (%)")
library(microbes)
meta <- twin_meta
meta
otu.counts <- twin_otu_class_green
wgs.counts <- twin_wgs_L4_cog
error <- meta_ID_error(meta, otu.counts); dim(error)
matches <- meta_ID_match(meta, otu.counts); dim(matches)
# Sort metadata by BMI
meta.bmi <- meta_group_sort(meta, meta$bmi_group)
otu.normed=normalize_counts(otu.counts)
sum(otu.normed[,2])
otu.normed <- prevalence_crop(otu.normed, 0.2) ## removed 5
otu.normed
otu.normed <- abundance_crop(otu.normed, 0.001) ## removed 3
meta
grouping_variable
all.bmi.compare <- otu_abundance_compare(otu.normed, meta, "bmi_group", "lean", "Obese")
all.bmi.compare
meta
grouping_variable=meta$bmi_group
group_a="lean"
group_b="obese"
group_a
group_b
grouping_variable
grouping_variable="bmi_group"
grouping_variable
otu.normed
meta
otu.normed.t = setNames(data.frame(t(otu.normed[,])), row.names(otu.normed))
otu.normed.t
otu.normed.t$study_id <-row.names(otu.normed.t)
otu.normed.t$study_id
meta.grp= meta[c("study_id", grouping_variable)]
meta.grp
merged.data <- merge( meta.grp, otu.normed.t, by="study_id")
merged.data
## Create names for colums
col1="OTU_name"
col2=paste(group_a,"_mean",sep="")
col3=paste(group_a,"_sd",sep="")
col4=paste(group_b,"_mean",sep="")
col5=paste(group_b,"_sd",sep="")
col6="p.value_t.test"
col7="p.value_wilcoxon"
names <- c(col1, col2, col3, col4, col5, col6, col7)
names
## Data.frame to deposit output from loop- this is empty at this point
TABLE1<-data.frame(col1=character(),
col2=numeric(),
col3=numeric(),
col4=numeric(),
col5=numeric(),
col6=numeric(),
col7=numeric(),
stringsAsFactors=FALSE); TABLE1
names(TABLE1) <-names
names(TABLE1)
index=names(merged.data)
myIndex<-length(index)
myIndex
index
grp.a.data=subset(merged.data, merged.data[,2]== group_a)
grp.b.data=subset(merged.data, merged.data[,2]== group_b)
# Calculate Means with rounding
grp_a_mean=round(mean(grp.a.data[,col],na.rm=T),digits=4)
grp_b_mean=round(mean(grp.b.data[,col],na.rm=T),digits=4)
i=2
index
myIndex
i=5
col=index[i]
col
grp.a.data=subset(merged.data, merged.data[,2]== group_a)
grp.a.data
grp.b.data=subset(merged.data, merged.data[,2]== group_b)
grp_a_mean=round(mean(grp.a.data[,col],na.rm=T),digits=4)
grp_b_mean=round(mean(grp.b.data[,col],na.rm=T),digits=4)
# Calculate SD's with rounding
grp_a_sd=round(sd(grp.a.data[,col],na.rm=T),digits=4)
grp_b_sd=round(sd(grp.b.data[,col],na.rm=T),digits=4)
stats.t=t.test(merged.data[,col]~merged.data[,2])
stats.t
grp_a_mean
p.value_t.test=round(stats.t$p.value,digits=4)
stats.w = wilcox.test(merged.data[,col]~merged.data[,2])
p.value_wilcoxon=round(stats.w$p.value,digits=4)
continuous_block=cbind(col,grp_a_mean,grp_a_sd,grp_b_mean,grp_b_sd,p.value_t.test, p.value_wilcoxon);continuous_block
# Add to data.frame
TABLE1[i,1]=col
TABLE1[i,2]=grp_a_mean
TABLE1[i,3]=grp_a_sd
TABLE1[i,4]=grp_b_mean
TABLE1[i,5]=grp_b_sd
TABLE1[i,6]=p.value_t.test
TABLE1[i,7]=p.value_wilcoxon
TABLE1
# Start the Loop
for (i in 3:myIndex)
{
# Create column index
col=index[i]
# Create two df's using subset() for NW and Ob calculations
#group.column <- paste("merged.data$",grouping_variable ,sep="")
#merged.data$bmi_group
#merged.data$grouping_variable
grp.a.data=subset(merged.data, merged.data[,2]== group_a)
grp.b.data=subset(merged.data, merged.data[,2]== group_b)
# Calculate Means with rounding
grp_a_mean=round(mean(grp.a.data[,col],na.rm=T),digits=4)
grp_b_mean=round(mean(grp.b.data[,col],na.rm=T),digits=4)
# Calculate SD's with rounding
grp_a_sd=round(sd(grp.a.data[,col],na.rm=T),digits=4)
grp_b_sd=round(sd(grp.b.data[,col],na.rm=T),digits=4)
# Now caluclate the t-test- do not use subset df's!
# Create t.test object
stats.t=t.test(merged.data[,col]~merged.data[,2])
# Pull out the p.value-with rounding
p.value_t.test=round(stats.t$p.value,digits=4)
#Wilcoxon
stats.w = wilcox.test(merged.data[,col]~merged.data[,2])
p.value_wilcoxon=round(stats.w$p.value,digits=4)
# Bind variables- internal check
continuous_block=cbind(col,grp_a_mean,grp_a_sd,grp_b_mean,grp_b_sd,p.value_t.test, p.value_wilcoxon);continuous_block
# Populate TABLE1 with above values
# Add to data.frame
TABLE1[i,1]=col
TABLE1[i,2]=grp_a_mean
TABLE1[i,3]=grp_a_sd
TABLE1[i,4]=grp_b_mean
TABLE1[i,5]=grp_b_sd
TABLE1[i,6]=p.value_t.test
TABLE1[i,7]=p.value_wilcoxon
} # End of Loop
TABLE1
table1=TABLE1[is.na(TABLE1)]
table1
table1=TABLE1[is.na(TABLE1),]
table1
table1=TABLE1[,is.na(TABLE1)]
TABLE1
TABLE2 <- TABLE1[-(1:2),]
TABLE2
library(devtools)
install_github("dlemas/microbes")
library(microbes)
# Twin Study Data
meta <- twin_meta
otu.counts <- twin_otu_class_green
wgs.counts <- twin_wgs_L4_cog
error <- meta_ID_error(meta, otu.counts); dim(error)
matches <- meta_ID_match(meta, otu.counts); dim(matches)
# Sort metadata by BMI
meta.bmi <- meta_group_sort(meta, meta$bmi_group)
## Normalize
otu.normed=normalize_counts(otu.counts)
sum(otu.normed[,2])
## Drop OTUs that occur in < 4 participants
otu.normed <- prevalence_crop(otu.normed, 0.2) ## removed 5
##Crop out bugs with low relative abundance bugs
otu.normed <- abundance_crop(otu.normed, 0.001) ## removed 3
all.bmi.compare <- otu_abundance_compare(otu.normed, meta, "bmi_group", "lean", "Obese")
all.bmi.compare
setwd("C:/Users/lemasd/Documents/GitHub/microbes")
library(devtools)
library(microbes)
# Twin Study Data
meta <- twin_meta
otu.counts <- twin_otu_class_green
wgs.counts <- twin_wgs_L4_cog
## Normalize
otu.normed=normalize_counts(otu.counts)
sum(otu.normed[,2])
## Drop OTUs that occur in < 4 participants
otu.normed <- prevalence_crop(otu.normed, 0.2) ## removed 5
##Crop out bugs with low relative abundance bugs
otu.normed <- abundance_crop(otu.normed, 0.001) ## removed 3
## Relative Abundance Comparision
otu.normed
meta
str(meta)
grouping_variable=meta$bmi_group
library_id=meta$study_id
# Format Variables
library_id=as.character(library_id)
grouping_variable=as.character(grouping_variable)
# Transpose Count Table
otu.normed.t = setNames(data.frame(t(otu.normed[,])), row.names(otu.normed))
otu.normed.t$library_id <-row.names(otu.normed.t)
meta.grp=as.data.frame(cbind(library_id, grouping_variable))
merged.data <- merge( meta.grp, otu.normed.t, by="library_id")
# Group names (only works for 2 groups)
group_a=levels(merged.data$grouping_variable)[1]
group_b=levels(merged.data$grouping_variable)[2]
# Create names for colums
col1="OTU_name"
col2=paste(group_a,"_mean",sep="")
col3=paste(group_a,"_sd",sep="")
col4=paste(group_b,"_mean",sep="")
col5=paste(group_b,"_sd",sep="")
col6="p.value_t.test"
col7="p.value_wilcoxon"
names <- c(col1, col2, col3, col4, col5, col6, col7)
# Create names for colums
col1="OTU_name"
col2=paste(group_a,"_mean",sep="")
col3=paste(group_a,"_sd",sep="")
col4=paste(group_b,"_mean",sep="")
col5=paste(group_b,"_sd",sep="")
col6="p.value_t.test"
col7="p.value_wilcoxon"
names <- c(col1, col2, col3, col4, col5, col6, col7)
# Create index for loops
index=names(merged.data)
myIndex<-length(index)
# Calculate mean/sd
mean_group=as.matrix(aggregate(merged.data[3:myIndex],by=list(merged.data$grouping_variable),FUN=mean))
sd_group=as.matrix(aggregate(merged.data[3:myIndex],by=list(merged.data$grouping_variable),FUN=sd))
mean_group
# Calculate mean/sd
mean_group=as.data.frame(aggregate(merged.data[3:myIndex],by=list(merged.data$grouping_variable),FUN=mean))
sd_group=as.data.frame(aggregate(merged.data[3:myIndex],by=list(merged.data$grouping_variable),FUN=sd))
mean_group
str(mean_group)
## Empty data.frame
TABLE1<-data.frame(col1=character(),
col2=numeric(),
col3=numeric(),
col4=numeric(),
col5=numeric(),
col6=numeric(),
col7=numeric(),
stringsAsFactors=FALSE); TABLE1
names(TABLE1) <-names
TABLE1
myIndex
index
mean_group
i=4
col=index[i]
# Pull values to populate table
grp1.mean=mean_group[1,i]
grp1.sd=mean_group[2,i]
grp2.mean=sd_group[1,i]
grp2.sd=sd_group[2,i]
grp1.mean
col
grp1.mean
mean_group
grp1.mean=mean_group[1,i-1]
grp1.mean
grp1.mean=mean_group[1,i-1]
grp1.sd=mean_group[2,i-1]
grp2.mean=sd_group[1,i-1]
grp2.sd=sd_group[2,i-1]
grp1.sd
mean_group
stats.t=t.test(merged.data[,col]~merged.data[,2])
p.value_t.test=round(stats.t$p.value,digits=4)
# Pull values to populate table
grp1.mean=round(mean_group[1,i-1],digits=3)
grp1.sd=round(mean_group[2,i-1],digits=3)
grp2.mean=round(sd_group[1,i-1], digits=3)
grp2.sd=round(sd_group[2,i-1], digits=3)
grp2.mean
grp2.sd
# Now caluclate the t-test
stats.t=t.test(merged.data[,col]~merged.data[,2])
# Pull out the p.value-with rounding- from this object (same process for df, t-stat, ect)
p.value_t.test=round(stats.t$p.value,digits=4)
#Wilcoxon
stats.w = wilcox.test(merged.data[,col]~merged.data[,2])
p.value_wilcoxon=round(stats.w$p.value,digits=4)
continuous_block=cbind(col,grp1.mean,grp_a_grp1.sdsd,grp2.mean,grp2.sd,p.value_t.test, p.value_wilcoxon);continuous_block
continuous_block=cbind(col,grp1.mean,grp1.sd,grp2.mean,grp2.sd,p.value_t.test, p.value_wilcoxon);continuous_block
# Add to data.frame
TABLE1[i,1]=col
TABLE1[i,2]=grp1.mean
TABLE1[i,3]=grp1.sd
TABLE1[i,4]=grp2.mean
TABLE1[i,5]=grp2.sd
TABLE1[i,6]=p.value_t.test
TABLE1[i,7]=p.value_wilcoxon
TABLE1
# Start the Loop
for (i in 3:myIndex)  {
# Create column index
col=index[i]
# Pull values to populate table
grp1.mean=round(mean_group[1,i-1],digits=3)
grp1.sd=round(mean_group[2,i-1],digits=3)
grp2.mean=round(sd_group[1,i-1], digits=3)
grp2.sd=round(sd_group[2,i-1], digits=3)
# Now caluclate the t-test
stats.t=t.test(merged.data[,col]~merged.data[,2])
# Pull out the p.value-with rounding- from this object (same process for df, t-stat, ect)
p.value_t.test=round(stats.t$p.value,digits=4)
#Wilcoxon
stats.w = wilcox.test(merged.data[,col]~merged.data[,2])
p.value_wilcoxon=round(stats.w$p.value,digits=4)
# Bind variables- internal check
continuous_block=cbind(col,grp1.mean,grp1.sd,grp2.mean,grp2.sd,p.value_t.test, p.value_wilcoxon);continuous_block
# Now populate the TABLE1 df with these values
# Add to data.frame
TABLE1[i,1]=col
TABLE1[i,2]=grp1.mean
TABLE1[i,3]=grp1.sd
TABLE1[i,4]=grp2.mean
TABLE1[i,5]=grp2.sd
TABLE1[i,6]=p.value_t.test
TABLE1[i,7]=p.value_wilcoxon
} # End of Loop
TABLE1
rm(list = ls())
setwd("C:/Users/lemasd/Documents/GitHub/microbes")
library(devtools)
load_all()
# Twin Study Data
meta <- twin_meta
otu.counts <- twin_otu_class_green
wgs.counts <- twin_wgs_L4_cog
meta.bmi <- meta_group_sort(meta, meta$bmi_group)
rm(list = ls())
setwd("C:/Users/lemasd/Documents/GitHub/microbes")
library(devtools)
load_all()
# Twin Study Data
meta <- twin_meta
otu.counts <- twin_otu_class_green
wgs.counts <- twin_wgs_L4_cog
otu.normed=normalize_counts(otu.counts)
otu.normed
otu.normed <- prevalence_crop(otu.normed, 0.2) ## removed 5
otu.normed <- abundance_crop(otu.normed, 0.001) ## removed 3
all.bmi.compare <- group_compare(otu.normed, meta, "bmi_group", "lean", "Obese")
all.bmi.compare <- group_compare(otu.normed, meta, meta$study_id, meta$bmi_group)
all.bmi.compare
rm(list = ls())
